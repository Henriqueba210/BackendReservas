// <auto-generated />
using System;
using BackendReservas.Service;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BackendReservas.Service.Migrations
{
    [DbContext(typeof(ReservasContext))]
    partial class ReservasContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("BackendReservas.Service.Models.Avaliacao", b =>
                {
                    b.Property<int>("AvaliacaoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AvaliacaoAtendimento")
                        .HasColumnType("int");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .HasColumnType("longtext");

                    b.Property<int>("EstablelecimentoId")
                        .HasColumnType("int");

                    b.HasKey("AvaliacaoId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("EstablelecimentoId");

                    b.ToTable("Avaliacoes");
                });

            modelBuilder.Entity("BackendReservas.Service.Models.Cliente", b =>
                {
                    b.Property<int>("ClienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<int>("EnderecoId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext");

                    b.Property<string>("Senha")
                        .HasColumnType("longtext");

                    b.Property<string>("Telefone")
                        .HasColumnType("longtext");

                    b.HasKey("ClienteId");

                    b.HasIndex("EnderecoId");

                    b.ToTable("Clientes");

                    b.HasData(
                        new
                        {
                            ClienteId = 1,
                            Email = "teste@gmail.com",
                            EnderecoId = 1,
                            Nome = "Henrique",
                            Senha = "1234",
                            Telefone = "19971522927"
                        },
                        new
                        {
                            ClienteId = 2,
                            Email = "teste@gmail.com",
                            EnderecoId = 1,
                            Nome = "Gabriel Cabral",
                            Senha = "1234",
                            Telefone = "19971522927"
                        },
                        new
                        {
                            ClienteId = 3,
                            Email = "teste@gmail.com",
                            EnderecoId = 1,
                            Nome = "Gabriel Oliveira",
                            Senha = "1234",
                            Telefone = "19971522927"
                        },
                        new
                        {
                            ClienteId = 4,
                            Email = "teste@gmail.com",
                            EnderecoId = 1,
                            Nome = "Carol",
                            Senha = "1234",
                            Telefone = "19971522927"
                        },
                        new
                        {
                            ClienteId = 5,
                            Email = "teste@gmail.com",
                            EnderecoId = 1,
                            Nome = "Eliana",
                            Senha = "1234",
                            Telefone = "19971522927"
                        });
                });

            modelBuilder.Entity("BackendReservas.Service.Models.Endereco", b =>
                {
                    b.Property<int>("EnderecoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Bairro")
                        .HasColumnType("longtext");

                    b.Property<string>("Cep")
                        .HasColumnType("longtext");

                    b.Property<string>("Cidade")
                        .HasColumnType("longtext");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("Pais")
                        .HasColumnType("longtext");

                    b.Property<string>("Rua")
                        .HasColumnType("longtext");

                    b.Property<string>("Uf")
                        .HasColumnType("longtext");

                    b.HasKey("EnderecoId");

                    b.ToTable("Enderecos");

                    b.HasData(
                        new
                        {
                            EnderecoId = 1,
                            Bairro = "Vila Israel",
                            Cep = "13478540",
                            Cidade = "Americana",
                            Numero = 850,
                            Pais = "Brasil",
                            Rua = "Avenida Nossa Senhora de Fátima",
                            Uf = "SP"
                        });
                });

            modelBuilder.Entity("BackendReservas.Service.Models.Estabelecimento", b =>
                {
                    b.Property<int>("EstabelecimentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Cnpj")
                        .HasColumnType("longtext");

                    b.Property<string>("Descricao")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<int>("EnderecoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("HoraAbertura")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Lotacao")
                        .HasColumnType("longtext");

                    b.Property<string>("Senha")
                        .HasColumnType("longtext");

                    b.Property<string>("Telefone")
                        .HasColumnType("longtext");

                    b.HasKey("EstabelecimentoId");

                    b.HasIndex("EnderecoId");

                    b.ToTable("Estabelecimentos");

                    b.HasData(
                        new
                        {
                            EstabelecimentoId = 1,
                            Cnpj = "18340388000135",
                            Descricao = "McDonald's",
                            Email = "teste@gmail.com",
                            EnderecoId = 1,
                            HoraAbertura = new DateTime(2021, 5, 30, 17, 17, 47, 970, DateTimeKind.Local).AddTicks(4791),
                            Lotacao = "19971522927",
                            Senha = "1234",
                            Telefone = "15"
                        });
                });

            modelBuilder.Entity("BackendReservas.Service.Models.Fidelidade", b =>
                {
                    b.Property<int>("FidelidadeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<int>("EstablelecimentoId")
                        .HasColumnType("int");

                    b.Property<int>("quantidadeCancelamentos")
                        .HasColumnType("int");

                    b.Property<int>("quantidadeReservas")
                        .HasColumnType("int");

                    b.HasKey("FidelidadeId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("EstablelecimentoId");

                    b.ToTable("Fidelidades");
                });

            modelBuilder.Entity("BackendReservas.Service.Models.Reserva", b =>
                {
                    b.Property<int>("ReservaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<int>("EstablelecimentoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dataReserva")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("horaFim")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("horaInicio")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("qtdPessoas")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<double>("valor")
                        .HasColumnType("double");

                    b.HasKey("ReservaId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("EstablelecimentoId");

                    b.ToTable("Reservas");
                });

            modelBuilder.Entity("BackendReservas.Service.Models.Avaliacao", b =>
                {
                    b.HasOne("BackendReservas.Service.Models.Cliente", "Cliente")
                        .WithMany("Avaliacoes")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendReservas.Service.Models.Estabelecimento", "Estabelelecimento")
                        .WithMany("Avaliacoes")
                        .HasForeignKey("EstablelecimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Estabelelecimento");
                });

            modelBuilder.Entity("BackendReservas.Service.Models.Cliente", b =>
                {
                    b.HasOne("BackendReservas.Service.Models.Endereco", "Endereco")
                        .WithMany()
                        .HasForeignKey("EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("BackendReservas.Service.Models.Estabelecimento", b =>
                {
                    b.HasOne("BackendReservas.Service.Models.Endereco", "Endereco")
                        .WithMany()
                        .HasForeignKey("EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("BackendReservas.Service.Models.Fidelidade", b =>
                {
                    b.HasOne("BackendReservas.Service.Models.Cliente", "Cliente")
                        .WithMany("Fidelidades")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendReservas.Service.Models.Estabelecimento", "Estabelelecimento")
                        .WithMany("Fidelidades")
                        .HasForeignKey("EstablelecimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Estabelelecimento");
                });

            modelBuilder.Entity("BackendReservas.Service.Models.Reserva", b =>
                {
                    b.HasOne("BackendReservas.Service.Models.Cliente", "Cliente")
                        .WithMany("Reservas")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendReservas.Service.Models.Estabelecimento", "Estabelelecimento")
                        .WithMany("Reservas")
                        .HasForeignKey("EstablelecimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Estabelelecimento");
                });

            modelBuilder.Entity("BackendReservas.Service.Models.Cliente", b =>
                {
                    b.Navigation("Avaliacoes");

                    b.Navigation("Fidelidades");

                    b.Navigation("Reservas");
                });

            modelBuilder.Entity("BackendReservas.Service.Models.Estabelecimento", b =>
                {
                    b.Navigation("Avaliacoes");

                    b.Navigation("Fidelidades");

                    b.Navigation("Reservas");
                });
#pragma warning restore 612, 618
        }
    }
}
